image: "rust:1.68.2-buster"

stages:
  - test
  - build
  - build-image
  - deploy

# Use cargo to test the project
test-minerva-admin:cargo:
  stage: test
  before_script:
    - cargo install cargo2junit
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --package minerva-admin --verbose -- --format=json  -Z unstable-options --report-time | cargo2junit > results.xml
  artifacts:
    when: always
    reports:
      junit: results.xml

variables:
  POSTGRES_HOST_AUTH_METHOD: trust

integration-test:cargo:
  stage: test
  before_script:
    - cargo install cargo2junit
  services:
    - name: postgres:13
      alias: database
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo build --package minerva-admin
    - PGHOST=database PGUSER=postgres cargo test --package integration-tests --verbose -- --format=json  -Z unstable-options --report-time --test-threads=1 --nocapture | cargo2junit > results.xml
  artifacts:
    when: always
    reports:
      junit: results.xml

build-minerva-service:
  stage: build
  before_script:
    - cargo install cargo2junit
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - rustup target add x86_64-unknown-linux-musl
    - cargo build --package minerva-service --release --target=x86_64-unknown-linux-musl
  artifacts:
    when: always
    paths:
      - target/release/minerva-service

build-service-image:
  stage: build-image
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${DOCKER_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${DOCKER_REGISTRY_USER}" "${DOCKER_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${DOCKER_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
  rules:
    - if: $CI_COMMIT_TAG

